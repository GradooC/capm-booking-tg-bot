import TelegramBot, { type Message } from "node-telegram-bot-api";
import { CONFIG } from "./config";
import { logger } from "./logger";
import { createReadStream } from "fs";
import { Db } from "./db";
import { pollUrls } from "./check-url";
import { monitoredUrls } from "./urls";

/**
 * Enum for bot message texts
 */
export enum MessageText {
    Start = "üü¢ Start",
    Stop = "üî¥ Stop",
    Logs = "üìù Get Logs",
}

type HandlerArgs = {
    msg: Message;
    bot: TelegramBot;
    db: Db;
};

export async function startHandler({ bot, msg, db }: HandlerArgs) {
    await db.addChatId(msg.chat.id);
    logger.info({ chatId: msg.chat.id }, "üí¨ New chat id added");

    bot.sendMessage(
        msg.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–æ—è–Ω–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.",
        {
            reply_markup: {
                keyboard: [
                    [
                        {
                            text: MessageText.Start,
                        },
                    ],
                    [
                        {
                            text: MessageText.Logs,
                        },
                    ],
                ],
                resize_keyboard: true,
            },
        }
    );
}

/**
 * Handles /start command
 */
export async function startPollingHandler({ msg, bot, db }: HandlerArgs) {
    if (db.state.isPollingOn) {
        bot.sendMessage(msg.chat.id, "üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!");
        return;
    }

    const { chatIds } = db.state;
    const message = `üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${
        CONFIG.checkInterval / 1000
    } —Å–µ–∫`;
    logger.info("üü¢ Monitoring started");

    await db.startPolling();

    chatIds.forEach((chatId) => {
        bot.sendMessage(chatId, message, {
            reply_markup: {
                keyboard: [
                    [
                        {
                            text: MessageText.Stop,
                        },
                    ],
                    [
                        {
                            text: MessageText.Logs,
                        },
                    ],
                ],
                resize_keyboard: true,
            },
        });
    });

    pollUrls({ monitoredUrls, bot, db });
}

/**
 * Handles /stop command
 */
export async function stopPollingHandler({ msg, bot, db }: HandlerArgs) {
    if (!db.state.isPollingOn) {
        bot.sendMessage(msg.chat.id, "üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
        return;
    }

    const { chatIds } = db.state;
    await db.stopPolling();

    logger.info("üî¥ Monitoring stopped");
    const message = "üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!";

    chatIds.forEach((chatId) => {
        bot.sendMessage(chatId, message, {
            reply_markup: {
                keyboard: [
                    [
                        {
                            text: MessageText.Start,
                        },
                    ],
                    [
                        {
                            text: MessageText.Logs,
                        },
                    ],
                ],
                resize_keyboard: true,
            },
        });
    });
}

/**
 * Handles logs request
 */
export async function getLogsHandler({ msg, bot }: HandlerArgs) {
    const chatId = msg.chat.id;
    await bot.sendDocument(chatId, createReadStream(CONFIG.logPath));
    logger.info(`üìù Logs sent to chat ${chatId}`);
}

/**
 * Handles generic message events
 */
export function messageHandler(args: HandlerArgs) {
    const text = args.msg.text;
    switch (text) {
        case MessageText.Stop:
            stopPollingHandler(args);
            break;
        case MessageText.Start:
            startPollingHandler(args);
            break;
        case MessageText.Logs:
            getLogsHandler(args);
            break;
        default:
            break;
    }
}
