import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';

interface MonitorConfig {
    url: string;
    chatId: string;
    checkInterval: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    timeout: number; // —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

interface ApiResponse {
    result: boolean;
}

class TelegramMonitorBot {
    private bot: TelegramBot;
    private config: MonitorConfig;
    private intervalId: NodeJS.Timeout | null = null;
    private lastSuccessTime: Date | null = null;
    private isRunning = false;

    constructor(botToken: string, config: MonitorConfig) {
        this.bot = new TelegramBot(botToken, { polling: true });
        this.config = config;
        this.setupBotCommands();
    }

    private setupBotCommands(): void {
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.bot.onText(/\/start/, (msg) => {
            const chatId = msg.chat.id.toString();
            this.config.chatId = chatId;

            if (!this.isRunning) {
                this.startMonitoring();
                this.bot.sendMessage(
                    chatId,
                    'üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n' +
                        `URL: ${this.config.url}\n` +
                        `–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${
                            this.config.checkInterval / 1000
                        } —Å–µ–∫`
                );
            } else {
                this.bot.sendMessage(chatId, '‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.bot.onText(/\/stop/, (msg) => {
            const chatId = msg.chat.id.toString();

            if (this.isRunning) {
                this.stopMonitoring();
                this.bot.sendMessage(chatId, 'üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } else {
                this.bot.sendMessage(chatId, '‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        this.bot.onText(/\/status/, (msg) => {
            const chatId = msg.chat.id.toString();
            const status = this.isRunning ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            const lastSuccess = this.lastSuccessTime
                ? `–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: ${this.lastSuccessTime.toLocaleString(
                      'ru-RU'
                  )}`
                : '–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ';

            this.bot.sendMessage(
                chatId,
                `–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${status}\n` +
                    `URL: ${this.config.url}\n` +
                    `${lastSuccess}`
            );
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
        this.bot.onText(/\/seturl (.+)/, (msg, match) => {
            const chatId = msg.chat.id.toString();
            if (match && match[1]) {
                this.config.url = match[1];
                this.bot.sendMessage(
                    chatId,
                    `‚úÖ URL –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${this.config.url}`
                );
            } else {
                this.bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /seturl <URL>'
                );
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        this.bot.onText(/\/setinterval (\d+)/, (msg, match) => {
            const chatId = msg.chat.id.toString();
            if (match && match[1]) {
                const seconds = parseInt(match[1]);
                if (seconds >= 5) {
                    this.config.checkInterval = seconds * 1000;

                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                    if (this.isRunning) {
                        this.stopMonitoring();
                        this.startMonitoring();
                    }

                    this.bot.sendMessage(
                        chatId,
                        `‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${seconds} —Å–µ–∫—É–Ω–¥`
                    );
                } else {
                    this.bot.sendMessage(
                        chatId,
                        '‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥'
                    );
                }
            } else {
                this.bot.sendMessage(
                    chatId,
                    '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setinterval <—Å–µ–∫—É–Ω–¥—ã>'
                );
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
        this.bot.onText(/\/help/, (msg) => {
            const chatId = msg.chat.id.toString();
            const helpText = `
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
/seturl <URL> - –ò–∑–º–µ–Ω–∏—Ç—å URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/setinterval <—Å–µ–∫—É–Ω–¥—ã> - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∏–Ω. 5 —Å–µ–∫)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.
      `;
            this.bot.sendMessage(chatId, helpText);
        });
    }

    private async checkUrl(): Promise<void> {
        try {
            const response = await axios.get(this.config.url, {
                timeout: this.config.timeout,
                validateStatus: () => true, // –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            });
            console.log('üöÄ ~ TelegramMonitorBot ~ checkUrl ~ response:', response);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {result: true}
            if (response.data && response.data.result === true) {
                this.lastSuccessTime = new Date();
                await this.sendSuccessNotification();
            }
        } catch (error) {
            console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: ${error}`);
            // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–∂–∏–¥–∞–µ–º—ã
        }
    }

    private async sendSuccessNotification(): Promise<void> {
        const message = `
üéâ –£–°–ü–ï–•!

URL: ${this.config.url}
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {result: true}

–ê–¥—Ä–µ—Å —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
    `;

        try {
            await this.bot.sendMessage(this.config.chatId, message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    public startMonitoring(): void {
        if (this.isRunning) {
            console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        this.intervalId = setInterval(() => {
            this.checkUrl();
        }, this.config.checkInterval);

        console.log(
            `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${this.config.url} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${
                this.config.checkInterval / 1000
            } —Å–µ–∫`
        );
    }

    public stopMonitoring(): void {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
        this.isRunning = false;
        console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    public getStatus(): {
        isRunning: boolean;
        lastSuccess: Date | null;
        config: MonitorConfig;
    } {
        return {
            isRunning: this.isRunning,
            lastSuccess: this.lastSuccessTime,
            config: this.config,
        };
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN =
    process.env.BOT_TOKEN || '8486085996:AAGIg8wQ3ynLjvcsyNPl-Qd_gltjjNcW_t8';
const MONITOR_CONFIG: MonitorConfig = {
    url: process.env.MONITOR_URL || 'https://example.com/api/check',
    chatId: process.env.CHAT_ID || '', // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ /start
    checkInterval: parseInt(process.env.CHECK_INTERVAL || '2000'), // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    timeout: parseInt(process.env.REQUEST_TIMEOUT || '10000'), // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
const monitorBot = new TelegramMonitorBot(BOT_TOKEN, MONITOR_CONFIG);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
    monitorBot.stopMonitoring();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
    monitorBot.stopMonitoring();
    process.exit(0);
});

console.log('ü§ñ Telegram Monitor Bot –∑–∞–ø—É—â–µ–Ω!');
console.log('–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');

export { TelegramMonitorBot, MonitorConfig };
